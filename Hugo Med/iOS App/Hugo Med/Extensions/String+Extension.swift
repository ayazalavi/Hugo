//
//  String+Extension.swift
//  Hugo Med
//
//  Created by Miranz  Technologies on 8/27/20.
//  Copyright Â© 2020 Ayaz Alavi. All rights reserved.
//

import Foundation
import CoreGraphics
import UIKit

extension String {
    
    static func scanFor(key: ContentKeys) -> Content {
        let decoder = PropertyListDecoder()
        if let codingKey = CodingUserInfoKey(rawValue: key.rawValue) {
            decoder.userInfo = [codingKey: key]
        }
        guard let appSettings = AppSettings,
            let content = try? decoder.decode(Content.self, from: appSettings) else { return Content(attributedStyle: "", style: "", text: "") }
        return content
    }
    
    var floatValue: Float {
        return (self as NSString).floatValue
    }
    
    var doubleValue: Double {
        return (self as NSString).doubleValue
    }
    
    var intValue: Int32 {
        return (self as NSString).intValue
    }
    
    func height(withConstrainedWidth width: CGFloat, font: UIFont) -> CGFloat {
        let constraintRect = CGSize(width: width, height: .greatestFiniteMagnitude)
        let boundingBox = self.boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, attributes: [NSAttributedString.Key.font: font], context: nil)
        return ceil(boundingBox.height)
    }

    func width(withConstrainedHeight height: CGFloat, font: UIFont) -> CGFloat {
        let constraintRect = CGSize(width: .greatestFiniteMagnitude, height: height)
        let boundingBox = self.boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, attributes: [NSAttributedString.Key.font: font], context: nil)
        return ceil(boundingBox.width)
    }
}

extension NSAttributedString {
    
    func height(withConstrainedWidth width: CGFloat) -> CGFloat {
        let constraintRect = CGSize(width: width, height: .greatestFiniteMagnitude)
        let boundingBox = boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, context: nil)
        return ceil(boundingBox.height)
    }

    func width(withConstrainedHeight height: CGFloat) -> CGFloat {
        let constraintRect = CGSize(width: .greatestFiniteMagnitude, height: height)
        let boundingBox = boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, context: nil)

        return ceil(boundingBox.width)
    }
}
